

                ███  ▒  ▒   ▒  ▒▒▒███
                █    ▒  ▒▒  ▒  ▒    █
                █    ▒  ▒ ▒ ▒  ▒    █
                █    ▒  ▒  ▒▒  ▒    █
                ███  ▒  ▒   ▒  ▒▒▒███

               computing instructions
_______________________________________________________

                 Machine Architecture
_______________________________________________________

Stack		
	AS	arithmetic stack [.. L R]
	BS	block stack      [.. B]
	RS	return stack     [.. C]

Register	
	R	right (a.k.a top)
	L	left (a.k.a. next)
	B	block (index in PB)
	C	continue (index in PB)
	PC	program counter (index in PB)

Flags
	T	test 

Buffer
	PB	program buffer (array of instruction bytes)
	BB	block buffer (a PC via a-z, A-Z)

_______________________________________________________

                   Instruction Set
_______________________________________________________

Arithmetic
	+	add		x=L+R	[.. L R]	[.. x R]
	-	sub		x=L-R	[.. L R]	[.. x R]
	*	mul		x=L*R	[.. L R]	[.. x R]
	/	div		x=L/R	[.. L R]	[.. x R]
	%	mod		x=L%R	[.. L R]	[.. x R]
	_	neg		x=-R	[.. L R]	[.. x R]

	>>	inc		x=R++	[.. L R]	[.. x R]
	<<	dec		x=R--	[.. L R]	[.. x R]

Bitwise
	&	and		x=L&R	[.. L R]	[.. x R]
	|	or		x=L|R	[.. L R]	[.. x R]
	~	inv		x=~R	[.. L R]	[.. x R]
	^	xor		x=L^R	[.. L R]	[.. x R]
	´	sal		x=L<<R	[.. L R]	[.. x R]
	`	sar		x=L>>R	[.. L R]	[.. x R]

Loads
	0	ldc0	R=0		[.. L R]	[.. L 0]
	1	ldc1	R=1		[.. L R]	[.. L 1]
	2	ldc2	R=2		[.. L R]	[.. L 2]
	3	ldc3	R=3		[.. L R]	[.. L 3]
	4	ldc4	R=4		[.. L R]	[.. L 4]
	5	ldc5	R=5		[.. L R]	[.. L 5]
	6	ldc6	R=6		[.. L R]	[.. L 6]
	7	ldc7	R=7		[.. L R]	[.. L 7]
	8	ldc8	R=8		[.. L R]	[.. L 8]
	9	ldc9	R=9		[.. L R]	[.. L 9]

Stack
	:	dup				[.. L R]	[.. L R R]
	.	drop			[.. L R]	[.. L]
	,	swap			[.. L R]	[.. R L]
	,,					[.. x L R]	[.. R L x]
	,,,					[.. x y L R][.. R y L x]
	;	cut				[.. L R]	[.. R]
	;;					[.. x L R]	[.. L R]
	;;;					[.. x y L R][.. y L R]

Tests
	=	eq		T=L==R
	>	gt		T=L>R
	<	lt		T=L<R
	!	not		T=!T
	?	(still available)

Branching
	{	if		when not T: PC="after }"
	}	end		T=t
	(	ifn		when T: PC="after )"
	) 	endn	(NOOP)

Blocks
	[	def		BS[++B]=PC+1, PC="after next ]"
	]	ret		PC=RS[C--]
	@	top		RS[++C]=PC+1, PC=BS[B--]
	a-z	call	RS[++C]=PC+1, PC=BB[x] (x = a-z, A-Z)
	A-Z	call	RS[++C]=PC+1, PC=BB[x] (x = a-z, A-Z)
	'	set x	BB[x]=BS[B--] (x = a-z, A-Z)

_______________________________________________________

                     Examples
_______________________________________________________

	abs		0<{_}		ldc0 lt if neg end
	min		>{,}		gt if swap end
	max		<{,}		lt if swap end
	inc		:1+.		dup ldc1 add drop
	dec		:1-.		dup ldc1 sub drop
	squr	:*.			dup mul drop
	le		>!			gt not
	ge		<!			lt not
	neq		=!			eq not

	rot		,,			[.. x L R]	[.. R L x]
	flip	, ,,, ,,	[.. x y L R][.. L R x y]

	fib		[:1>.{:1-.:@,:1-.@+.}]
	fib2	[:1>.{::1-.@,:2-.@+.}]
	fib3	[:1>.{<<:@,<<@+.}]



_______________________________________________________

                       Notes
_______________________________________________________

Initial Rewrite 
	A program is rewritten once into the internal
	instruction set in a single pass. 
	It is expected that the program	might become 
	shorter or longer. 

Overloaded Instructions
	It doesn't always make sense to use the same 
	instruction twice (or even more) directly following
	each other. This can be used to assign a slightly
	different meaning to such sequences of two or 
	more identical instructions. Such sequences are
	called extended instructions. 
	Extended instructions are rewritten to internal 
	instructions during init so they do never appear
	in a running program. All instructions in running
	programs are single byte instructions.

Increment-Decrement
	Due to limitations of the ASCII range there are
	no direct instructions for increment (++) and
	decrement (--) but there are overloaded instructions:

		>> is increment (as making the gt test twice 
		is of no use)
		<< is decrement (again double lt has no use)

Tail Calls
	Tail calls use the usual `top` instruction `@`. 
	Unnecessary block nesting simply is not done when
	`@` is directly followed by the end of a block `]`.
	This is an optimization within the VM. 

If-Then-Else
	A if-then-else structure is simply done via:

		test{then}!{else}

	This works as the end always flips T to true when
	leaving a branch. The negation afterwards will only 
	evaluate to true when the branch before it wasn't
	evaluated. 
	This alternates endlessly when using not `!`:

		test{then}!{else}!{then}!{else}

Logical AND
	A serious of tests is done as just that

		test1{test2{do}}

Logical OR
	A serious of alternatives tests is done with
	branches that enter when test is false and do not
	change test when exiting:

		test1(test2(test3)){do}

Loading/Passing Functions
	To pass a named function as an argument using the
	block stack it is simply wrapped in another block.
	The VM can optimize this by using internal 
	instructions that directly call the wrapped function.

		[a]			=> #a (where # means load fn)

_______________________________________________________

              Internal Instruction Set
_______________________________________________________

Internal instructions are those substituted by the VM
to improve program performance at runtime. The ranges
of 128-255 and 0-31 are internal instructions. 

* load constant: instead of identifying the full 
  constant at runtime a "ldc" instruction with 1 or
  more value bytes is substituted. 
  This also takes care of base 10 vs. base 16. 

* 0-10 equal ldc constant 0-10?


_______________________________________________________

                      Problems
_______________________________________________________

* How to go back to the start of "this" block? can the 
  logic be used that this index (at the point of 
  recursive calls) should be on top of BS (in B)

	[xxx] must be useable to "return" a "function"
	a-z must be useable to "point to" a "function"
